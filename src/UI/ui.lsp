(load "src/Moteur/moteur.lsp")
(defpackage #:ui
  (:use #:cl)
  (:export 
    #:ui #:main #:testUI #:errorRun #:warningRun #:successRun #:infoRun
    #:afficherPokemon #:notImplementedFunction
  )
)
(in-package #:ui)

;; Diverses fonctions mour mettre de la couleur, et gérer les caractères, dans le terminal
(defvar shrug "¯\\_(ツ)_/¯")
(defvar smile "٩(◕‿◕｡)۶")
(defvar sad "ಥ_ಥ")
(defvar angry "ಠ_ಠ")
(defvar flipTable "(╯°□°）╯︵ ┻━┻")
(defvar unflipTable "┬─┬ノ( º _ ºノ)")
(defvar flipTable2 "(ノಠ益ಠ)ノ彡┻━┻")
(defvar kawaii "(◕‿◕✿)")
(defvar sorry "ಥ﹏ಥ")
(defvar star "★")
(defvar star2 "☆")
(defvar star3 "✩")
(defvar star4 "✪")
(defvar star5 "✫")
(defvar star6 "✬")
(defvar star7 "✭")
(defvar spc " ")
(defun shrug () (format t shrug))
(defun smile () (format t smile))
(defun sad () (format t sad))
(defun angry () (format t angry))
(defun fliptable () (format t flipTable))
(defun unfliptable () (format t unflipTable))
(defun fliptable2 () (format t flipTable2))
(defun kawaii () (format t kawaii))
(defun sorry () (format t sorry))
(defun star () (format t star))
(defun star2 () (format t star2))
(defun star3 () (format t star3))
(defun star4 () (format t star4))
(defun star5 () (format t star5))
(defun star6 () (format t star6))
(defun star7 () (format t star7))
(defun spc () (format t spc))

(defun newLine () (format t "~%"))
(defun pRes () (format t "~c[0m" #\ESC))
(defun pCol (code) (format t "~c[~am" #\ESC code))
(defun pRGBFore (r g b) (format t "~c[38;2;~a;~a;~am" #\ESC r g b ))
(defun pRGBBack (r g b) (format t "~c[48;2;~a;~a;~am" #\ESC r g b))
(defun pComplex (code r g b) (format t "~c[~a;2;~a;~a;~am" #\ESC code r g b))
(defun notImplemented (command) (pcol 5) (prgbfore 110 50 50) (format t "TODO : command > ") (pRes) (prgbfore 110 50 50) (format t "~a" command) (format t " not implemented yet ") (sorry) (pres) (newLine))
(defun notImplementedFunction (function) (pcol 5) (prgbfore 110 50 50) (format t "TODO : function > ") (pRes) (prgbfore 110 50 50) (format t "~a" function) (format t " not implemented yet") (sorry) (pres) (newLine))
(defun unknownCommand (command) (pcol 1) (pcol 4) (prgbfore 110 50 50) (format t "Commande ~a inconnue " command) (pRes) (pcol 1) (prgbfore 110 50 50) (fliptable) (format t "~%vérifier l'orthographe ou utiliser la commande help") (pres) (newLine))

(defun helpUse () (pcol 1) 
    (pcol 4) (prgbfore 30 52 194) (format t "Utilisation de ce sytème expert : ") (pRes) (prgbfore 30 59 194) (kawaii) (pres) (newline)
    (prgbfore 52 194 30) (format t "Tappez `help` pour accéder à tout moment à la liste des commandes") (pres) (newLine)
    (prgbfore 52 194 30) (format t "Tappez `help use` pour revoir ce message") (pres) (newLine)
    (prgbfore 52 194 30) (format t "Tappez `exit` pour quitter l'application") (pres) (newLine)
    (pres) (newline)
    (prgbfore 52 194 30) (format t "Cette application est un système expert qui sert à rechercher des pokémons") (pres) (newLine)
    (prgbfore 52 194 30) (format t "Pour ce faire, en premier lieu, il vous faudra chercher un pokémon `find > pokemon > EN_NAME`") (pres) (newLine)
    (prgbfore 52 194 30) (format t "EN_NAME correspond au nom anglais du pokémon. Exemple Bulbasaur | Jynx") (pres) (newLine)
    (prgbfore 52 194 30) (format t "Une fois le pokémon trouvé, vous pourrez consulter les informations suivantes : ") (pres) (newLine)
    (format t "- ") (prgbfore 52 194 30) (format t "les pokémons sensibles aux attaques du pokémon choisi") (pres) (newLine)
    (format t "- ") (prgbfore 52 194 30) (format t "la listes des pokémons qui ont l'avantage sur celui que vous avez choisis") (pres) (newLine)
    (prgbfore 52 194 30) (format t "À noter aussi, que vous pouvez rechercher ces mêmes informations en précisant un type, et non le nom d'un pokémon") (pres) (newLine) 
    (prgbfore 52 194 30) (format t "Pour ce faire, il vous suffit de taper `find > type > EN_TYPE_NAME`") (pres) (newLine)
    (prgbfore 52 194 30) (format t "EN_TYPE_NAME correspond au nom anglais du type. Exemple : Fire | Ghost") (pres) (newLine)
)

;; Affiche l'aide de l'application
(defun help (&optional command)
    (cond 
        ((null command)
            (newline) (pCol 1) (pCol 4) (pRGBFore 150 0 200) (format t "Voici la liste des instructions disponibles :") (pRes) (newLine)
            (format t "- ") (pCol 3) (pRGBFore 150 0 200) (format t "help ") (pRes) (prgbfore 150 0 200) (format t ": affiche cette liste") (pRes) (newLine)
            (format t "- ") (pCol 3) (pRGBFore 150 0 200) (format t "help <command> ") (pRes) (prgbfore 150 0 200) (format t ": obtiens de l'aide sur la commande") (pRes) (newLine)
            (format t "- ") (pCol 3) (pRGBFore 150 0 200) (format t "exit ") (pRes) (prgbfore 150 0 200) (format t ": quitte l'application") (pres) (newLine)
            (format t "- ") (pCol 3) (pRGBFore 150 0 200) (format t "find ") (pRes) (prgbfore 150 0 200) (format t ": permet de rechercher quelque chose") (pres) (newLine)
        )
        (
            (cond 
                ((string= command "find") 
                    (pCol 1) (pCol 4) (pRGBFore 150 0 200) (format t "Voici la liste des instructions disponibles :") (pRes) (newLine)
                    (format t "- ") (pCol 3) (pRGBFore 150 0 200) (format t "find pokemon ") (pRes) (prgbfore 150 0 200) (format t ": permet de rechercher un pokemon") (pres) (newLine)
                    (format t "- ") (pCol 3) (pRGBFore 150 0 200) (format t "find type ") (pRes) (prgbfore 150 0 200) (format t ": permet de rechercher un type") (pres) (newLine)
                    (format t "- ") (pCol 3) (pRGBFore 150 0 200) (format t "find posture ") (pRes) (prgbfore 150 0 200) (format t ": permet de savoir si on recherche un pokémon efficace en attaque ou en défence contre le pokémon recherché") (pres) (newLine)
                )
                ((string= command "use") (helpUse))
                (t (unknownCommand command))
            )
        )
    )
)

(defun errorRun (place info) (pcol 1) (prgbfore 240 10 10) (format t "[~a] => Une erreure est survenue ~a" place info) (pRes) (newline))
(defun warningRun (place info) (pcol 1) (prgbfore 240 240 10) (format t "[~a] => Attention : ~a" place info) (pRes) (newline))
(defun infoRun (place info) (pcol 1) (prgbfore 10 10 240) (format t "[~a] => ~a" place info) (pRes) (newline))
(defun successRun (place info) (pcol 1) (prgbfore 10 240 10) (format t "[~a] => ~a" place info) (pRes) (newline))

;; Fonction principale de l'application
(defun app ()
    (newline) (pcol 4) (format t "Que voulez-vous faire ?") (pres) (newline)
    (let ((in (read-line)))
        (cond 
            ((null in) t)
            ((search "help" in) 
                (cond 
                    ((equal (length in) 4) (help))
                    (t (help (subseq in 5)))
                )
                (app)
            )
            ((string= in "exit"))
            ((string= in "find") (findSmth) (app))
            (t (unknownCommand in) (app))
        )
    )
)

(defun findSmth ()
    (pcol 4) (format t "Que voulez-vous rechercher ?") (pres) (newline)
    (let ((src (read-line)))
        (cond 
            ((string= src "pokemon")
                (cond 
                    ((not (faits:get-predicat "nomPokemon" faits:*predicats*))
                        (pcol 4) (format t "Quel est le nom ") (prgbfore 255 0 0) (pcol 1) (format t "EN ANGLAIS") (pres) (pcol 4) (format t " du pokemon que vous recherchez ?") (pres) (newline)
                        (let ((nomPoke (read-line)))
                            (faits:add-predicat (faits:make-predicat :name "nomPokemon" :value nomPoke))
                            (moteur:moteurRun)
                        )
                    )
                    (t (notimplementedfunction shrug))
                )
            )
            ((string= src "posture")
                (cond 
                    ((not (faits:get-predicat "typeRecherche" faits:*predicats*))
                        (pcol 4) (format t "Quel est la posture [Attaque|Defense] du pokemon que vous recherchez ?") (pres) (newline)
                        (let ((typePos (read-line)))
                            (if (or (string= typePos "Attaque") (string= typePos "Defense"))
                                (progn
                                    (faits:add-predicat (faits:make-predicat :name "typeRecherche" :value typePos))
                                    (moteur:moteurRun)
                                )
                                (badPrint "cette posture")
                            )
                        )
                    )
                    (t (notimplementedfunction shrug))
                )
            )
            ((string= src "type")
                (cond 
                    ((not (faits:get-predicat "typePokemon" faits:*predicats*))
                        (pcol 4) (format t "Quel est le type ") (prgbfore 255 0 0) (pcol 1) (format t "EN ANGLAIS") (pres) (pcol 4) (format t " du pokemon que vous recherchez ?") (pres) (newline)
                        (let ((typeSearch (read-line)))
                            (if (faits:valid-type-of-pokemon typeSearch faits:*types*)
                                (progn
                                    (faits:add-predicat (faits:make-predicat :name "typePokemon" :value (faits:valid-type-of-pokemon typeSearch faits:*types*)))
                                    (moteur:moteurRun)
                                )
                                (badPrint "ce type")
                            )
                        )
                    )
                    (t (notimplementedfunction shrug))
                )
            )
            (t (unknownCommand src))
        )
    )
)

(defun badprint (info) (pcol 3) (format t "~a n'existe pas " info) (angry) (pres) (newline))

(defun afficherPokemon (pokemons)
    (dolist (pokemon pokemons)
        (prgbfore 150 10 80) (pcol 1) (format t "Nom : ") (pres) (prgbfore 150 10 80) (format t "~a" (faits:pokemon-name pokemon)) (pres) (newline)
        (let ((typesPoke (faits:pokemon-typesPoke pokemon)))
            (pcol 1) (prgbfore 150 10 40) (format t "Types : ") (pres) (newline)
            (dolist (type typesPoke)
                (format t "~a" (faits:getJson (faits:getJson type :type) :name)) (newline)
            ) 
            (newline)
        )   
        ; (format t "Stats : ~a" (faits:pokemon-stats pokemon)) (newline)
        ; (format t "Level : ~a" (faits:pokemon-level pokemon)) (newline)
        (smile) (newline)
        (newline) (prgbfore 10 10 240) 
        (star5)(spc)(star5)(spc)(star5)(spc)(star5)(spc)(star5)(spc)(star5)(spc)(star5)(spc)(star5)(spc)
        (star5)(spc)(star5)(spc)(star5)(spc)(star5)(spc)(star5)(spc)(star5)(spc)(star5)(spc)(star5)(spc)
        (star5)(spc)(star5)(spc)(star5)(spc)(star5)(spc)(star5)(spc)(star5)(spc)(star5)(spc)(star5)(spc)
        (pres) (newline)
        ; (faits:pokemon-name pokemon)
        ; (faits:pokemon-typesPoke pokemon)
        ; (faits:pokemon-stats pokemon)
        ; (faits:pokemon-level pokemon)
    )
)

;; Fonction de test pour tous types d'essais pour l'interface utilisateur
(defun testUI ()
    (helpuse)
    (help)
    (shrug) (newline)
    (smile) (newline)
    (sorry) (newline)
    (sad) (newline)
    (angry) (newline)
    (fliptable) (newline)
    (unfliptable) (newline)
    (fliptable2) (newline)
    (star)(spc)(star2)(spc)(star3)(spc)(star4)(spc)(star5)(spc)(star6)(spc)(star7)(newline)

    (star5)(spc)(star5)(spc)(star5)(spc)(star5)(spc)(star5)(spc)(star5)(spc)(star5)(spc)(star5)(spc)(newline)

    ; (format t "test") (newline) (newline) (format t "retest") (newline)
    ; (app)
    ; (format t "Quel est votre nom ?~%")
    ; (let ((name (read-line)))
    ;     (prgbfore 175 0 175) (pcol 4) (pcomplex 58 25 175 25)  (format t "Bonjour ~a malheureusement, vous êtes sur la partie de test. Cette discussion va s'arrêter là!" name) (pres) (newline)
    ; )
)

(defun main ()
    
    (format t "~%Ui Start !~%")
    (format t "~%Initialisation des types de pokemons~%")
    (faits:init-type faits:*types*)

    (newline) (prgbfore 10 10 240) 
    (star5)(spc)(star5)(spc)(star5)(spc)(star5)(spc)(star5)(spc)(star5)(spc)(star5)(spc)(star5)(spc)
    (star5)(spc)(star5)(spc)(star5)(spc)(star5)(spc)(star5)(spc)(star5)(spc)(star5)(spc)(star5)(spc)
    (star5)(spc)(star5)(spc)(star5)(spc)(star5)(spc)(star5)(spc)(star5)(spc)(star5)(spc)(star5)(spc)
    (pres) (newline)

    (helpuse)
    (help)
    (app)
    ; (format t "~%Lancement du moteur~%")
    (afficherPokemon faits:*facts*)

    ; (print faits:*predicats*)
    ; (print (length faits:*predicats*))
    ; (moteur:moteurRun)
    ; (faits:add-predicat (faits:make-predicat :name "typeRecherche" :value "Attaque"))
    ; (print faits:*predicats*)
    ; (print (length faits:*predicats*))
    ; (moteur:moteurRun)
    ; (print (length faits:*facts*))
    ; (help)
    ; (app)
    (pcol 1) (format t "Au revoir ") (sad) (pres) (newline)
)